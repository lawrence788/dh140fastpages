{
  
    
        "post0": {
            "title": "Assignment 3",
            "content": "Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . myDf = pd.read_csv(&#39;billionaires.csv&#39;) #read the csv into a dataframe . print(&quot;rows: &quot; + str(myDf.shape[0])) print(&quot;columns: &quot; + str(myDf.shape[1])) . rows: 2614 columns: 22 . print(list(myDf.columns)) . [&#39;name&#39;, &#39;rank&#39;, &#39;year&#39;, &#39;company.founded&#39;, &#39;company.name&#39;, &#39;company.relationship&#39;, &#39;company.sector&#39;, &#39;company.type&#39;, &#39;demographics.age&#39;, &#39;demographics.gender&#39;, &#39;location.citizenship&#39;, &#39;location.country code&#39;, &#39;location.gdp&#39;, &#39;location.region&#39;, &#39;wealth.type&#39;, &#39;wealth.worth in billions&#39;, &#39;wealth.how.category&#39;, &#39;wealth.how.from emerging&#39;, &#39;wealth.how.industry&#39;, &#39;wealth.how.inherited&#39;, &#39;wealth.how.was founder&#39;, &#39;wealth.how.was political&#39;] . print(myDf.dtypes) . name object rank int64 year int64 company.founded int64 company.name object company.relationship object company.sector object company.type object demographics.age int64 demographics.gender object location.citizenship object location.country code object location.gdp float64 location.region object wealth.type object wealth.worth in billions float64 wealth.how.category object wealth.how.from emerging bool wealth.how.industry object wealth.how.inherited object wealth.how.was founder bool wealth.how.was political bool dtype: object . print(myDf.head(2)) . name rank year company.founded company.name company.relationship 0 Bill Gates 1 1996 1975 Microsoft founder 1 Bill Gates 1 2001 1975 Microsoft founder company.sector company.type demographics.age demographics.gender ... 0 Software new 40 male ... 1 Software new 45 male ... location.gdp location.region wealth.type wealth.worth in billions 0 8.100000e+12 North America founder non-finance 18.5 1 1.060000e+13 North America founder non-finance 58.7 wealth.how.category wealth.how.from emerging wealth.how.industry 0 New Sectors True Technology-Computer 1 New Sectors True Technology-Computer wealth.how.inherited wealth.how.was founder wealth.how.was political 0 not inherited True True 1 not inherited True True [2 rows x 22 columns] . print(myDf.tail(2)) . name rank year company.founded company.name 2612 Zdenek Bakala 1565 2014 1994 Patria Finance 2613 Zhu Wenchen 1565 2014 1999 Furen Pharmaceutical Group company.relationship company.sector company.type demographics.age 2612 founder coal new 53 2613 chairman pharmaceuticals new 48 demographics.gender ... location.gdp location.region 2612 male ... 0.0 Europe 2613 male ... 0.0 East Asia wealth.type wealth.worth in billions wealth.how.category 2612 privatized and resources 1.0 Resource Related 2613 executive 1.0 New Sectors wealth.how.from emerging wealth.how.industry wealth.how.inherited 2612 True Mining and metals not inherited 2613 True Technology-Medical not inherited wealth.how.was founder wealth.how.was political 2612 True True 2613 True True [2 rows x 22 columns] . print(myDf.describe()) . rank year company.founded demographics.age count 2614.000000 2614.000000 2614.000000 2614.000000 mean 599.672533 2008.411630 1924.711936 53.341239 std 467.885695 7.483598 243.776546 25.333320 min 1.000000 1996.000000 0.000000 -42.000000 25% 215.000000 2001.000000 1936.000000 47.000000 50% 430.000000 2014.000000 1963.000000 59.000000 75% 988.000000 2014.000000 1985.000000 70.000000 max 1565.000000 2014.000000 2012.000000 98.000000 location.gdp wealth.worth in billions count 2.614000e+03 2614.000000 mean 1.769103e+12 3.531943 std 3.547083e+12 5.088813 min 0.000000e+00 1.000000 25% 0.000000e+00 1.400000 50% 0.000000e+00 2.000000 75% 7.250000e+11 3.500000 max 1.060000e+13 76.000000 . print(myDf[[&quot;name&quot;]]) . name 0 Bill Gates 1 Bill Gates 2 Bill Gates 3 Warren Buffett 4 Warren Buffett ... ... 2609 Wu Chung-Yi 2610 Wu Xiong 2611 Yang Keng 2612 Zdenek Bakala 2613 Zhu Wenchen [2614 rows x 1 columns] . myDf[[&quot;company.founded&quot;]].plot() . &lt;AxesSubplot:&gt; . print(myDf[[&quot;company.founded&quot;]].loc[[0,1,2,3,4,5,6,7,8,9]]) . company.founded 0 1975 1 1975 2 1975 3 1962 4 1962 5 1990 6 1896 7 1975 8 1975 9 1976 . # as well as the matching 10 elements of a different column that has interesting text print(myDf[[&quot;company.founded&quot;, &quot;name&quot;]].loc[[0,1,2,3,4,5,6,7,8,9]]) #print(myDf[&quot;name&quot;].loc[[0,1,2,3,4,5,6,7,8,9]]) . company.founded name 0 1975 Bill Gates 1 1975 Bill Gates 2 1975 Bill Gates 3 1962 Warren Buffett 4 1962 Warren Buffett 5 1990 Carlos Slim Helu 6 1896 Oeri Hoffman and Sacher 7 1975 Paul Allen 8 1975 Amancio Ortega 9 1976 Lee Shau Kee . # and make a bar plot with the text values horizontally and the numeric values as the bar heights a = myDf[[&quot;company.founded&quot;, &quot;name&quot;]].iloc[:10] #print(a) a.plot(kind=&quot;bar&quot;, x=&quot;name&quot;, y=&quot;company.founded&quot;) . &lt;AxesSubplot:xlabel=&#39;name&#39;&gt; . a.plot(kind=&quot;barh&quot;, x=&quot;name&quot;, y=&quot;company.founded&quot;) . &lt;AxesSubplot:ylabel=&#39;name&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) b = a.plot(kind=&quot;barh&quot;, x=&quot;name&quot;, y=&quot;company.founded&quot;, figsize=(12,5)) b.set_title(&quot;Company found dates for several billionaires&quot;) . Text(0.5, 1.0, &#39;Company found dates for several billionaires&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . c = myDf.loc[myDf[&#39;year&#39;] == 1996][[&quot;wealth.worth in billions&quot;, &quot;name&quot;]].iloc[:10] #print(c) d = c.plot(kind=&quot;pie&quot;, y=&quot;wealth.worth in billions&quot;) d.legend(c[&quot;name&quot;]) . &lt;matplotlib.legend.Legend at 0x7f4f04e1fb20&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . count = 0 male = 0 nonmale = 0 #4. for loop for index, row in myDf.iterrows(): #3. conditional expression if count &gt;= 100: break if row[&#39;demographics.gender&#39;] == &quot;male&quot;: #2. mathematical operation male += 1 else: nonmale += 1 count += 1 #print(male, nonmale) #5. function definition: compare men vs non-men billionaires def makeOutput(numMale, numNonMale): return (&quot;Out of the top 100 billionaires, there are &quot; + str(numMale) + &quot; male and &quot; + str(numNonMale) + &quot; non-male.&quot;) #5. function execution print(makeOutput(male, nonmale)) . Out of the top 100 billionaires, there are 82 male and 18 non-male. . mydict = {&quot;gender&quot;: [&quot;male&quot;, &quot;non-male&quot;], &quot;count&quot;: [male, nonmale] } f = pd.DataFrame(mydict) #print(f) e = f.plot(kind=&quot;pie&quot;, y=&quot;count&quot;, labels=f[&quot;count&quot;], title=&quot;How many of the top 100 billionaires are men?&quot;) e.legend(f[&quot;gender&quot;]) . &lt;matplotlib.legend.Legend at 0x7f4f04bf77c0&gt; . e = f.plot(kind=&quot;bar&quot;, x=&quot;gender&quot;, y=&quot;count&quot;, title=&quot;How many of the top 100 billionaires are men?&quot;) . As we can see from the charts above, 82 of the top 100 billionaires are men. These two plots above make it much easier to visualize the gender disparity. .",
            "url": "https://lawrence788.github.io/dh140fastpages/2022/03/01/Assignment03.html",
            "relUrl": "/2022/03/01/Assignment03.html",
            "date": " • Mar 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lawrence788.github.io/dh140fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lawrence788.github.io/dh140fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lawrence788.github.io/dh140fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lawrence788.github.io/dh140fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}